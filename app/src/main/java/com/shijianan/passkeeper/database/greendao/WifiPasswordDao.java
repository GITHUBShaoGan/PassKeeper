package com.shijianan.passkeeper.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shijianan.passkeeper.database.entity.WifiPassword;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WIFI_PASSWORD".
*/
public class WifiPasswordDao extends AbstractDao<WifiPassword, String> {

    public static final String TABLENAME = "WIFI_PASSWORD";

    /**
     * Properties of entity WifiPassword.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property WifiName = new Property(1, String.class, "wifiName", false, "WIFI_NAME");
        public final static Property RouterAccount = new Property(2, String.class, "routerAccount", false, "ROUTER_ACCOUNT");
        public final static Property RouterPassword = new Property(3, String.class, "routerPassword", false, "ROUTER_PASSWORD");
        public final static Property OperatorAccount = new Property(4, String.class, "operatorAccount", false, "OPERATOR_ACCOUNT");
        public final static Property OperatorPassword = new Property(5, String.class, "operatorPassword", false, "OPERATOR_PASSWORD");
    };


    public WifiPasswordDao(DaoConfig config) {
        super(config);
    }
    
    public WifiPasswordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WIFI_PASSWORD\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"WIFI_NAME\" TEXT," + // 1: wifiName
                "\"ROUTER_ACCOUNT\" TEXT," + // 2: routerAccount
                "\"ROUTER_PASSWORD\" TEXT," + // 3: routerPassword
                "\"OPERATOR_ACCOUNT\" TEXT," + // 4: operatorAccount
                "\"OPERATOR_PASSWORD\" TEXT);"); // 5: operatorPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WIFI_PASSWORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WifiPassword entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String wifiName = entity.getWifiName();
        if (wifiName != null) {
            stmt.bindString(2, wifiName);
        }
 
        String routerAccount = entity.getRouterAccount();
        if (routerAccount != null) {
            stmt.bindString(3, routerAccount);
        }
 
        String routerPassword = entity.getRouterPassword();
        if (routerPassword != null) {
            stmt.bindString(4, routerPassword);
        }
 
        String operatorAccount = entity.getOperatorAccount();
        if (operatorAccount != null) {
            stmt.bindString(5, operatorAccount);
        }
 
        String operatorPassword = entity.getOperatorPassword();
        if (operatorPassword != null) {
            stmt.bindString(6, operatorPassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WifiPassword entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String wifiName = entity.getWifiName();
        if (wifiName != null) {
            stmt.bindString(2, wifiName);
        }
 
        String routerAccount = entity.getRouterAccount();
        if (routerAccount != null) {
            stmt.bindString(3, routerAccount);
        }
 
        String routerPassword = entity.getRouterPassword();
        if (routerPassword != null) {
            stmt.bindString(4, routerPassword);
        }
 
        String operatorAccount = entity.getOperatorAccount();
        if (operatorAccount != null) {
            stmt.bindString(5, operatorAccount);
        }
 
        String operatorPassword = entity.getOperatorPassword();
        if (operatorPassword != null) {
            stmt.bindString(6, operatorPassword);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WifiPassword readEntity(Cursor cursor, int offset) {
        WifiPassword entity = new WifiPassword( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wifiName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routerAccount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routerPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // operatorAccount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // operatorPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WifiPassword entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWifiName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRouterAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRouterPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperatorAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOperatorPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WifiPassword entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(WifiPassword entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
